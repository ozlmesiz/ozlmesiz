#!/usr/bin/env groovy
// Define variables
List category_list = ["\"Not Installation:selected\"","\"${env.BRANCH_NAME}\""]
List debug_item = ["\"Select:selected\"","\"VTO\"","\"RTO\""]
List release_item = ["\"Select:selected\"","\"STO\"","\"PTO\""]
List default_item = ["\"Not Installation\""]
String categories = buildScript(category_list)
String release = buildScript(release_item)
String debug = buildScript(debug_item)
String setups = populateSetups(default_item,debug_item,release_item)
// Methods to build groovy scripts to populate data
String buildScript(List values){
  return "return $values"
}
String populateSetups(List default_item, List debugList, List releaseList){
return """if(Categories =~ /^developer(.*)/){
     return $debugList
     }
     else if(Categories =~ /^master(.*)/){
     return $releaseList
     }else{
     return $default_item
     }
     """
}
// Properties step to set the Active choice parameters via 
// Declarative Scripting
properties([
    parameters([
        [$class: 'ChoiceParameter', choiceType: 'PT_SINGLE_SELECT',   name: 'Categories', script: [$class: 'GroovyScript', fallbackScript: [classpath: [], sandbox: false, script: 'return ["ERROR"]'], script: [classpath: [], sandbox: false,
        script:  categories]]],
        [$class: 'CascadeChoiceParameter', choiceType: 'PT_SINGLE_SELECT',name: 'Setups', referencedParameters: 'Categories', script: [$class: 'GroovyScript', fallbackScript: [classpath: [], sandbox: false, script: 'return ["error"]'], script: [classpath: [], sandbox: false, script: setups]]]
    ])
])

pipeline {
    agent none
    parameters {
        string(name: 'TARGET_MAIN_BRANCH', defaultValue: '', description: 'if you want to merge, please select merge branch (like master, master-async otherwise keep to empty)')
    }
    options {
        buildDiscarder logRotator(
            daysToKeepStr: '5',
            numToKeepStr: '5'
            )
    }
    stages {
        stage('Initialize') {
            agent {
            dockerfile {
              filename 'cinar_build.Dockerfile'
              dir 'docker'
              additionalBuildArgs '--add-host=gitlab.ulakhaberlesme.com.tr:192.168.57.53 --build-arg uid=$(id -u) --build-arg gid=$(id -g) --tag cinar_nrf_build:1.0'
              customWorkspace "${env.JOB_NAME}"
              label 'DockerNRF'
              reuseNode true
            }
          }
            steps {
                echo 'cinar_build container is up.'
                deleteDir()
            }
        }
        stage('Continous-Integration-Testing') {
            agent {
                docker {
                image 'cinar_nrf_build:1.0'
                args '--add-host gitlab.ulakhaberlesme.com.tr:192.168.57.53 -v /home/jenkins/.ssh:/home/jenkins/.ssh'
                label 'DockerNRF'
                reuseNode true
                }
            }
            stages {
                stage('Main-Build') {

                    when {expression {return env.CHANGE_TARGET == null}}

                    steps {
                        dir('YAML'){
                            checkout([$class: 'GitSCM',
                            branches: [[name: '*/master']],
                            extensions: [[$class: 'CleanBeforeCheckout']],
                            userRemoteConfigs: [[
                            credentialsId: 'd0d6728d-c821-4ad6-a654-6cb0e6a4de3f',
                            url: 'http://gitlab.ulakhaberlesme.com.tr/5GCN/YAML.git']]])
                        }
                        script {   
                            echo "${env.Setups}"   
                            echo "${JOB_NAME}"
                            if(env.BRANCH_NAME =~ /^developer(.*)/) {
                            sh '''#!/bin/bash
                                export CINAR_BASE=/opt/cinar
                                export CINAR_CODE_GENERATOR_DIR=$CINAR_BASE/bin/ccg
                                export CINAR_YAML_DIR=${WORKSPACE}/YAML
                                cp -R /opt/cinar/certificate ${WORKSPACE}
                                export BUILD_NUMBER=${BUILD_NUMBER}.debug
                                make all
                                make test
                                make dist NF_DIR=nrf DIST_TYPE="deb_vnf" OUT_DIR=/Source/cinar_nrf/out MAJOR=${MAJOR} PHASE_NUMBER=${PHASE_NUMBER} SPRINT_NUMBER=${SPRINT_NUMBER} BUILD_NUMBER=${BUILD_NUMBER}
                                make doc
                            '''
                            }
                            if(env.BRANCH_NAME =~ /^master(.*)/) {
                            sh '''#!/bin/bash
                                export CINAR_BASE=/opt/cinar
                                export CINAR_CODE_GENERATOR_DIR=$CINAR_BASE/bin/ccg
                                export CINAR_YAML_DIR=${WORKSPACE}/YAML
                                cp -R /opt/cinar/certificate ${WORKSPACE}
                                make all release=on
                                make test
                                make dist NF_DIR=nrf DIST_TYPE="deb_vnf" OUT_DIR=/Source/cinar_nrf/out MAJOR=${MAJOR} PHASE_NUMBER=${PHASE_NUMBER} SPRINT_NUMBER=${SPRINT_NUMBER} BUILD_NUMBER=${BUILD_NUMBER}
                            '''
                            }
                        }
                    }
                }
                stage ('PR-Build'){

                    when {expression {return env.CHANGE_TARGET != null}}

                    steps {
                        dir('YAML'){
                            checkout([$class: 'GitSCM',
                            branches: [[name: '*/master']],
                            extensions: [[$class: 'CleanBeforeCheckout']],
                            userRemoteConfigs: [[
                            credentialsId: 'd0d6728d-c821-4ad6-a654-6cb0e6a4de3f',
                            url: 'http://gitlab.ulakhaberlesme.com.tr/5GCN/YAML.git']]])
                        }
                        script {           
                            if(env.CHANGE_TARGET =~ /^developer(.*)/) {
                            sh '''#!/bin/bash
                                export CINAR_BASE=/opt/cinar
                                export CINAR_CODE_GENERATOR_DIR=$CINAR_BASE/bin/ccg
                                export CINAR_YAML_DIR=${WORKSPACE}/YAML
                                    make clean
                                    make all
                                    make test
                            '''
                            }
                        }
                    }
                }

                stage('Upload-Artifact') {
                    when {expression {return env.CHANGE_TARGET == null}}
                    steps {
                        script {
                            sh """#!/bin/bash
                                rsync -avz --rsh="/usr/bin/sshpass -p "724365" ssh -o StrictHostKeyChecking=no -l root" /opt/cinar/packages/deb_vnf/ ubuntu@192.168.13.47:/debrepo/xenial/cinar/
                            """
                        }
                    }
                }
            }
            post {
                always {
                    deleteDir()
                }
            }
        }

        stage('SendNotification') {
            agent {
                node {
                    label 'DockerG3LOG'
                }
            }
            stages{
                stage('PR') {
                    when {expression {return env.CHANGE_TARGET != null}}
                        steps {
                            script {
                                emailext(
                                    body: """Jenkins Build ${currentBuild.currentResult}: Job ${env.JOB_NAME},
                                    At: ${env.BUILD_URL}""",
                                    recipientProviders: [requestor(), culprits()],
                                    subject: "Jenkins Build ${currentBuild.currentResult}: Job ${env.JOB_NAME}."
                                )
                            }
                        }
                }
                stage('Daily') {
                    environment {
                    RECIPIENT=[
                            "betul.aslan@ulakhaberlesme.com.tr",
                            "cem.topkaya@ulakhaberlesme.com.tr",
                            "sertac.keskin@ulakhaberlesme.com.tr",
                            "bora.ilgar@ulakhaberlesme.com.tr",
                            "hakan.oduncu@ulakhaberlesme.com.tr",
                            "sami.gurpinar@ulakhaberlesme.com.tr",
                        ].join(",");
                    }
                    when {expression {return env.CHANGE_TARGET == null}}

                    steps {
                        sh """#!/bin/bash
                            git init
                            echo "<html>" >> commitmessage.html
                            echo "<header><title> This is the title</title></header>" >> commitmessage.html
                            echo "<body> Job ${env.JOB_NAME} build ${env.BUILD_NUMBER}\n More info at: ${env.BUILD_URL} </body>" >> commitmessage.html
                            echo "<body> Commit Autor and Commit Messages </body>" >> commitmessage.html
                            echo "<body> `git log --format=%B -n 1 \$(git log -1 --pretty=format:"%h") | cat -` </body>" >> commitmessage.html
                            echo "</html>" >> commitmessage.html
                            """
                        script {
                            def mailRecipients = "${env.RECIPIENT}"
                            def jobName = currentBuild.fullDisplayName
                            emailext body: '''${FILE, path="commitmessage.html"}''',
                                mimeType: 'text/html',
                                subject: "Jenkins Build ${currentBuild.currentResult}: Job ${env.JOB_NAME}",
                                to: "${mailRecipients}",
                                replyTo: "${mailRecipients}",
                                recipientProviders: [[$class: 'CulpritsRecipientProvider']]
                        }
                    }
                } 
            }
            post {
                always {
                  deleteDir()
                }
            }
        }
    }
}
