#!/usr/bin/env groovy
// Define variables
List category_list = ["\"Not Installation:selected\"","\"${env.BRANCH_NAME}\""]
List debug_item = ["\"Select:selected\"","\"VTO\"","\"RTO\""]
List release_item = ["\"Select:selected\"","\"STO\"","\"PTO\""]
List default_item = ["\"Not Installation\""]
String categories = buildScript(category_list)
String release = buildScript(release_item)
String debug = buildScript(debug_item)
String setups = populateSetups(default_item,debug_item,release_item)
// Methods to build groovy scripts to populate data

String buildScript(List values) {
  return "return $values"
}

//sh 'for f in `find -name "script.sh"`; do cat $f; done'

String populateSetups(List default_item, List debugList, List releaseList) {
return """if(Categories =~ /^developer(.*)/){
     return $debugList
     }
     else if(Categories =~ /^master(.*)/){
     return $releaseList
     }else{
     return $default_item
     }
     """
}

def installPcfCommonLibPackage(jobName, branchName) {
    def debugVersion=sh(returnStdout: true, script:'apt-cache show libcnrpcfcommon | grep Version | cut -d\' \' -f2 |  grep debug | head -1').trim()
    def releaseVersion=sh(returnStdout: true, script:'apt-cache show libcnrpcfcommon | grep Version | cut -d\' \' -f2 |  egrep -v \'tcell|debug\' | head -1').trim()
    def turkcellVersion=sh(returnStdout: true, script:'apt-cache show libcnrpcfcommon | grep Version | cut -d\' \' -f2 |  grep tcell | head -1').trim()

    def pcfCommonVersion = ""
    if( branchName.startsWith('developer') ) { // Debug sürümü
        pcfCommonVersion = debugVersion
    } else if( branchName.startsWith('master') ) { // Turkcell veya debug olmayan libcnrpcfcommon sürümünü alacağız
        pcfCommonVersion = releaseVersion
    } else if( branchName.startsWith('turkcell') ) { // TCELL gerçek sürümü
        pcfCommonVersion = turkcellVersion
    }

    echo "> env.PCF_COMMON_VERSION değeri: ${pcfCommonVersion}"

    echo ">>> jobName.startsWith('libcnrpcfcommon'): "+ jobName.startsWith('libcnrpcfcommon')                            
    if (!jobName.startsWith('libcnrpcfcommon')) {
        sh "sudo apt-get update"
        sh "sudo apt-get install libcnrpcfcommon=${pcfCommonVersion}"
    }
}

// Properties step to set the Active choice parameters via 
// Declarative Scripting
properties([
    parameters([
        [$class: 'ChoiceParameter', choiceType: 'PT_SINGLE_SELECT',   name: 'Categories', script: [$class: 'GroovyScript', fallbackScript: [classpath: [], sandbox: false, script: 'return ["ERROR"]'], script: [classpath: [], sandbox: false,
        script:  categories]]],
        [$class: 'CascadeChoiceParameter', choiceType: 'PT_SINGLE_SELECT',name: 'Setups', referencedParameters: 'Categories', script: [$class: 'GroovyScript', fallbackScript: [classpath: [], sandbox: false, script: 'return ["error"]'], script: [classpath: [], sandbox: false, script: setups]]]
    ])
])

pipeline {
    agent none

    environment {
        NF_NAME = "${JOB_NAME.substring(0, JOB_NAME.indexOf('/'))}"
        BUILD_NUMBER = "${env.BRANCH_NAME =~ /^developer.*/ ? env.BUILD_NUMBER + '.debug' : env.BUILD_NUMBER}"
        NEW_VERSION = "${MAJOR}.${PHASE_NUMBER}.${SPRINT_NUMBER}.${BUILD_NUMBER}"
    }
    
    parameters {
        string(name: 'TARGET_MAIN_BRANCH', defaultValue: '', description: 'if you want to merge, please select merge branch (like master, master-async otherwise keep to empty)')
    }

    options {
        buildDiscarder logRotator(
            daysToKeepStr: '5',
            numToKeepStr: '5'
        )
    }
    
    stages {
        stage('Initialize') {
            agent {
              dockerfile {
                filename 'cinar_build.Dockerfile'
                dir 'docker'
                //additionalBuildArgs "--add-host=bitbucket.ulakhaberlesme.com.tr:192.168.10.14 --build-arg uid=\$(id -u) --build-arg gid=\$(id -g) --tag cinar/${JOB_NAME.substring(0, JOB_NAME.indexOf('/'))}:1.0"
                additionalBuildArgs "--add-host=bitbucket.ulakhaberlesme.com.tr:192.168.10.14 --build-arg uid=\$(id -u) --build-arg gid=\$(id -g) --tag cinar_\$(echo $JOB_NAME | awk -F '/' '{print \$1}')_build:1.0"
                customWorkspace "${env.JOB_NAME}"
                label 'CINAR_BUILD_NODE_PCF'
                reuseNode true
              }
            }
            steps {
                echo '>>> cinar_build.Dockerfile Dosyasından Jenkins ajanı için cinar_pcf_build:1.0 isimli yansı oluşturuldu.'
                deleteDir()
            }
        }
        
        /*
        cinar_pcf_build:1.0 İsimli docker yansısından bir derleme ortamı konteyneri oluşturacağız
        Bu konteynerde:
        - host'un docker.sock dosyası konteyner içinde olacak ki DID (docker-in-docker) işlemi yaparak job hata üretirse konteyner içinden hali hazırdaki konteyneri commit ile yansı haline getirelim yani snapshot alalım
        - host içindeki docker çalıştırılabilir dosyasını konteyner içine bağlıyoruz ki bir de konteyner içinde docker-client kurmak zorunda kalmayalım
        - Birim test sonuçları /tmp/unittest.log dosyasına yazıldığı ve konteyner kapanınca ulaşılamadığı için hostun /tmp dizinini konteynere bağlıyoruz
        - konteyner içinde /etc/host dosyası değiştirilemediği için add-host ile bitbucket.ulakhaberlesme.com.tr adresinin IP bilgisini 192.168.10.14 veriyoruz
        */
        stage('Continous-Integration-Testing') {
            agent {
                docker {
                  image 'cinar_pcf_build:1.0'
                  args '--name=pcfsms_docker_node -v /var/run/docker.sock:/var/run/docker.sock -v /usr/bin/docker:/usr/bin/docker -v /tmp:/tmp --add-host bitbucket.ulakhaberlesme.com.tr:192.168.10.14 -v /home/jenkins/.ssh:/home/jenkins/.ssh'
                  label 'CINAR_BUILD_NODE_PCF'
                  customWorkspace "${env.JOB_NAME}"
                  reuseNode true
                }
            }
            /*
            Shell betikleri içinde tekrar "export CINAR_XXX=..." yazmamak için aşağıdaki gibi ortam değişkenlerini tanımlıyoruz
            */
            environment {
                CINAR_YAML_DIR = "${WORKSPACE}/YAML"
                CINAR_BASE = "/opt/cinar"
                CINAR_CODE_GENERATOR_DIR = "${CINAR_BASE}/bin/ccg"
            }
            
            stages {
                stage('Main-Build') {
                    when {expression {return env.CHANGE_TARGET == null}}
                    steps {
                    	echo ">>>> BUILD_NUMBER: ${BUILD_NUMBER}, NEW_VERSION: ${NEW_VERSION}, NF_NAME: ${NF_NAME}}"
                        
                        dir('YAML') {
                            checkout([$class: 'GitSCM',
                            	branches: [[name: '*/master']],
                            	extensions: [[$class: 'CleanBeforeCheckout']],
                            	userRemoteConfigs: [[
                            		credentialsId: '7267ca7d-ae35-456c-9732-4c84b1d2c715',
                            		url: 'https://bitbucket.ulakhaberlesme.com.tr:8443/scm/cin/yaml.git'
                                ]]
                            ])
                        }
                        dir('YAML/cinar_pcf_yaml') {
                            checkout([$class: 'GitSCM',
                            	branches: [[name: '*/master']],
                            	extensions: [[$class: 'CleanBeforeCheckout']],
                            	userRemoteConfigs: [[
                            		credentialsId: '7267ca7d-ae35-456c-9732-4c84b1d2c715',
                            		url: 'https://bitbucket.ulakhaberlesme.com.tr:8443/scm/cin/cinar_pcf_yaml.git'
                                ]]
                            ])
                        }
                        script {   
                            echo "> env.Setups: ${env.Setups}"                            
                            sh 'echo > git HEAD revizyon numarası: $(cat .git/HEAD)'
                            
                            installPcfCommonLibPackage(env.JOB_NAME, env.BRANCH_NAME)

                            if(env.BRANCH_NAME =~ /^developer(.*)/) {                            
                              sh '''
                            	#!/bin/bash
                                
                              	echo ">>> \${WORKSPACE}/certificate/pcf_turkcell Dizini TURKCELL dağıtımı olmadığı için silinecek!"
                                rm -rf \${WORKSPACE}/certificate/pcf_turkcell                                
                                
                                echo ">>> Kök sertifikalı SSL sertifikaları ${WORKSPACE}/certificate dizinine kopyalanacak"
                                mkdir -p \${WORKSPACE}/certificate
                                for f in localhost.key localhost.crt; do [ -f "/opt/cinar/certificate/${f}" ] && cp /opt/cinar/certificate/${f} \${WORKSPACE}/certificate/${f}; done
                                
                                make dist
                                make docs
                              '''.stripIndent()
                            }
                            
                            if(env.BRANCH_NAME =~ /^master(.*)/) {
                              sh '''
                              	echo ">>> \${WORKSPACE}/certificate/pcf_turkcell Dizini TURKCELL dağıtımı olmadığı için silinecek!"
                                rm -rf \${WORKSPACE}/certificate/pcf_turkcell
                                
                                #cp -R /opt/cinar/certificate \${WORKSPACE}
                                rm -rf \${WORKSPACE}/certificate/pcf_turkcell
                                
                                make dist release=on
                              '''.stripIndent()
                            }
                            
                            if(env.BRANCH_NAME =~ /^turkcell(.*)/) {
                              sh '''
                              	echo ">>> TURKCELL için paketlendiği için docker yansısı oluşturulurken \${WORKSPACE}/certificate/pcf_certificate/ dizinine kopyalanan sertifikaları \${WORKSPACE}/certificate dizinine kopyalıyoruz"
                                rm -rf ./certificate/localhost*
                                cp -R ./certificate/pcf_certificate/localhost* ./certificate
                                rm -rf ./certificate/pcf_turkcell
                                
                                export BUILD_NUMBER=\${BUILD_NUMBER}.tcell
                                
                                make dist release=on
                              '''.stripIndent()
                            }
                        }
                    }
                }
                
                stage ('Pull Request Build'){
                    when {expression {return env.CHANGE_TARGET != null}}

                    steps {
                    	echo ">>> This was triggered by Pull Request"
                    	echo ">>> BUILD_NUMBER: ${BUILD_NUMBER}, NEW_VERSION: ${NEW_VERSION}, NF_NAME: ${NF_NAME}"
                        
                        dir('YAML'){
                            checkout([$class: 'GitSCM',
                            	branches: [[name: '*/master']],
                            	extensions: [[$class: 'CleanBeforeCheckout']],
                            	userRemoteConfigs: [[
                            		credentialsId: '7267ca7d-ae35-456c-9732-4c84b1d2c715',
                            		url: 'https://bitbucket.ulakhaberlesme.com.tr:8443/scm/cin/yaml.git'
                                ]]
                            ])
                        }
                        dir('YAML/cinar_pcf_yaml') {
                            checkout([$class: 'GitSCM',
                            	branches: [[name: '*/master']],
                            	extensions: [[$class: 'CleanBeforeCheckout']],
                            	userRemoteConfigs: [[
                            		credentialsId: '7267ca7d-ae35-456c-9732-4c84b1d2c715',
                            		url: 'https://bitbucket.ulakhaberlesme.com.tr:8443/scm/cin/cinar_pcf_yaml.git'
                                ]]
                            ])
                        }
                        script {           
                            if(env.CHANGE_TARGET =~ /^developer(.*)/) {
                              sh '''
                              	make clean
                                make all
                                make test
                              '''.stripIndent()
                            }
                            
                            if(env.CHANGE_TARGET =~ /^turkcell(.*)/) {
                              sh '''
                              	make clean
                                make all
                                make test
                              '''.stripIndent()
                            }
                        }
                    }
                }
                
                stage('UnitTest-Coverage') {
                    steps {
                        sh 'echo ">>> Running Unit Tests"'
                        junit 'test.xml'
                        
                        sh 'echo ">>> Running Cobertura Code Coverage"'                        
                        cobertura autoUpdateHealth: false, autoUpdateStability: false, classCoverageTargets: '100, 0, 100', coberturaReportFile: 'coveragecnrpcf*.xml', conditionalCoverageTargets: '10, 0, 10', failUnhealthy: false, fileCoverageTargets: '100, 0, 100', lineCoverageTargets: '70, 0, 70', maxNumberOfBuilds: 0, methodCoverageTargets: '100, 0, 100', onlyStable: false, packageCoverageTargets: '100, 0, 100', sourceEncoding: 'ASCII', zoomCoverageChart: false
                        
                        sh 'echo ">>> Running Code Coverage"'
                        publishCoverage adapters: [coberturaAdapter('coveragecnrpcf*.xml')], failUnstable: true, globalThresholds: [[thresholdTarget: 'Method', unstableThreshold: 0.0], [thresholdTarget: 'Package', unstableThreshold: 100.0], [thresholdTarget: 'Line', unstableThreshold: 70.0], [thresholdTarget: 'Conditional', unstableThreshold: 10.0], [thresholdTarget: 'Class', unstableThreshold: 100.0], [thresholdTarget: 'File', unstableThreshold: 100.0]], sourceFileResolver: sourceFiles('STORE_LAST_BUILD')
                    }
                }
                
                stage('Static Code Analysis') {
                    steps {
                        sh 'echo ">>> Running Code Analysis"'
                        publishCppcheck failureThreshold: '0', newFailureThreshold: '0', pattern: 'cppcheck*.xml', severityInformation: false, severityNoCategory: false, severityPortability: false, severityStyle: false, unHealthy: '1'
                    }
                }
                
                stage('Doxygen-Report') {
                    steps {
                        sh 'echo ">>> Doxygen report"'
                        publishHTML([allowMissing: true, alwaysLinkToLastBuild: false, keepAll: false, reportDir: 'docs/html', reportFiles: 'index.html', reportName: 'HTML Report', reportTitles: ''])
                    }
                }
                
                stage('Upload-Artifact') {
                    when { expression {return env.CHANGE_TARGET == null} }
                    steps {
                        script {
                            sh '''
                                rsync -avz --rsh="/usr/bin/sshpass -p "724365" ssh -o StrictHostKeyChecking=no -l root" /opt/cinar/packages/ ubuntu@192.168.13.47:/debrepo/latest
                                rsync -avz --rsh="/usr/bin/sshpass -p "724365" ssh -o StrictHostKeyChecking=no -l root" /opt/cinar/packages/ ubuntu@192.168.13.47:/debrepo/cinar
                            '''.stripIndent()
                            
                            if(env.BRANCH_NAME =~ /^turkcell(.*)/) {
                                sh '''
                                   rsync -avz --rsh="/usr/bin/sshpass -p "724365" ssh -o StrictHostKeyChecking=no -l root" /opt/cinar/packages/ ubuntu@192.168.13.47:/debrepo/latest
                                   rsync -avz --rsh="/usr/bin/sshpass -p "724365" ssh -o StrictHostKeyChecking=no -l root" /opt/cinar/packages/ ubuntu@192.168.13.47:/debrepo/turkcell
                                '''.stripIndent()
                            }
                        }
                    }
                }
            }
            post {
                always {
                    
                    echo ">>> post-always: Continous-Integration-Testing stage finished"
                    //deleteDir()
                }
                failure {
                	echo "This job failed"                    
                    script { 
                    	sh 'echo "Jenkins görevi başarısız oldu!!!" && sudo docker commit pcfsms_docker_node cinar/pcfsms:docker' 
                    }
                }
            }
        }

        stage('Merge and Tag') {
            agent {
                node {
                    label 'CINAR_BUILD_NODE_1'
                }
            }

            stages {
                stage('Merge-to-branch') {

                    when {
                        expression { return env.CHANGE_TARGET == null }
                        branch 'developer*'
                        not { environment name: 'TARGET_MAIN_BRANCH', value: '' }
                    }
                    steps {
                      sshagent(['cinar-build-node-1']) {
                      	sh '''
                            #!/bin/bash
                            
                            ls -ltr
                            git config --global credential.helper store
                            git config --global user.name "jenkins.servis"
                            git push -f origin HEAD:\${TARGET_MAIN_BRANCH}
                          '''.stripIndent()
                      }
                    }
                }
                stage('Tag-to-Commit') {

                    when {
                        expression { return env.CHANGE_TARGET == null }
                    }
                    steps {
                    
                    	echo ">>> BUILD_NUMBER: ${BUILD_NUMBER}, NEW_VERSION: ${NEW_VERSION}, NF_NAME: ${NF_NAME}"
                        sshagent(['cinar-build-node-1']) {
                            sh '''
                              git config --global credential.helper store
                              git config --global user.name \"jenkins.servis\"
                            '''.stripIndent()
                            
                            sh "git tag -a \"${env.NF_NAME}-${env.NEW_VERSION}\" -m \"${env.NF_NAME} new version is ${env.NEW_VERSION}\""
                            sh "git push -f origin \"${env.NF_NAME}-${env.NEW_VERSION}\""                            
                        }
                    }
                }
            }
        }
        stage('Continous-Deployment') {
            agent {
                node {
                    label 'cinar_box_1.1_functional_test'
                }
            }
            when {
                expression {return env.CHANGE_TARGET == null}
                not { environment name: 'Setups', value: 'Not Installation' }
            }
            steps {
                dir('Devops') {
                    checkout([$class: 'GitSCM',
                    	branches: [[name: '*/master']],
                    	extensions: [[$class: 'CleanBeforeCheckout']],
                    	userRemoteConfigs: [[
                    		credentialsId: '7267ca7d-ae35-456c-9732-4c84b1d2c715',
                    		url: 'https://bitbucket.ulakhaberlesme.com.tr:8443/scm/cin/devops.git'
                  		]]
                  	]) 
                }
                echo ">>> NF NAME: ${env.NF_NAME}"
                echo ">>> VERSION: ${env.NEW_VERSION}"
                
                sh """
                  echo '>>> Debug package installation'
                  cd ${WORKSPACE}/Devops/ansible
                  echo '\${env.NF_NAME}=${env.NEW_VERSION}' > package-list
                  ansible-playbook ${params.Setups}_nf_package_install.yaml -i ${params.Setups}_hosts -l pcf -e package_list_file=package-list
                """
            }
            post {
                always {
                   //deleteDir()
                   echo ">>> post-always: Continous-Deployment stage finished"
                }
            }
        }
        stage('SendNotification') {
            agent {
                node {
                    label 'CINAR_BUILD_NODE_1'
                }
            }
            stages{
                stage('PR') {
                    when {expression {return env.CHANGE_TARGET != null}}
                    steps {
                        script {
                            emailext(
                                body: """Jenkins Build ${currentBuild.currentResult}: Job ${env.JOB_NAME},
                                At: ${env.BUILD_URL}""",
                                recipientProviders: [requestor(), culprits()],
                                subject: "Jenkins Build ${currentBuild.currentResult}: Job ${env.JOB_NAME}."
                            )
                        }
                    }
                }
                stage('Daily') {
                    environment {
                    RECIPIENT=[
                            "ozlem.aydin@ulakhaberlesme.com.tr",
                            "cem.topkaya@ulakhaberlesme.com.tr",
                            "sertac.keskin@ulakhaberlesme.com.tr",
                            "hakan.oduncu@ulakhaberlesme.com.tr",
                            "sami.gurpinar@ulakhaberlesme.com.tr",
                        ].join(",");
                    }
                    
                    when {expression {return env.CHANGE_TARGET == null}}
                    steps {
                        sh """#!/bin/bash
                            git init
                            echo "<html>" >> commitmessage.html
                            echo "<header><title> This is the title</title></header>" >> commitmessage.html
                            echo "<body> Job ${env.JOB_NAME} build ${env.BUILD_NUMBER}\n More info at: ${env.BUILD_URL} </body>" >> commitmessage.html
                            echo "<body> Commit Autor and Commit Messages </body>" >> commitmessage.html
                            echo "<body> `git log --format=%B -n 1 \$(git log -1 --pretty=format:"%h") | cat -` </body>" >> commitmessage.html
                            echo "</html>" >> commitmessage.html
                            """.stripIndent()
                        script {
                            def mailRecipients = "${env.RECIPIENT}"
                            def jobName = currentBuild.fullDisplayName
                            emailext body: '''${FILE, path="commitmessage.html"}''',
                                mimeType: 'text/html',
                                subject: "Jenkins Build ${currentBuild.currentResult}: Job ${env.JOB_NAME}",
                                to: "${mailRecipients}",
                                replyTo: "${mailRecipients}",
                                recipientProviders: [[$class: 'CulpritsRecipientProvider']]
                        }
                    }
                } 
            }
            post {
                always {
                  //deleteDir()
                   echo "post-always: SendNotification stage finished"
                }
            }
        }
    }
}
