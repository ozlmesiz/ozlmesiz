#!/usr/bin/env groovy

pipeline {
    agent none
    parameters {
        string(name: 'TARGET_MAIN_BRANCH', defaultValue: '', description: 'if you want to merge, please select merge branch (like master, otherwise keep to empty)')
        string(name: 'VERSION_ULAK', defaultValue: '1', description: 'Please write to VERSION_ULAK')
        string(name: 'MINOR_VERSION_ULAK', defaultValue: '2', description: 'Please write to MINOR_VERSION_ULAK')
        string(name: 'PATCH_LEVEL_VERSION_ULAK', defaultValue: '6', description: 'Please write to PATCH_LEVEL_VERSION_ULAK')
        choice(name: 'Setups', choices: ['Not Installation', 'Installation'], description: 'if you want to run Continous-Deployment stage, please select "Installation"')
    }
    options {
        buildDiscarder logRotator(
            daysToKeepStr: '5',
            numToKeepStr: '5'
            )
    }
    stages {
        stage('Continous-Integration-Testing') {
            agent {
                node {
                  label "Open_EPC_node"
                  customWorkspace "${env.JOB_NAME}"
                }
            }
            stages {
                stage('Main-Build') {

                    //when {expression {return env.CHANGE_TARGET == null}}

                    steps {
                        script {   
                            echo "${JOB_NAME}"
                            sh '''#!/bin/bash
                                   sudo rm -r /opt/OpenEPC
                                   sudo mkdir /opt/OpenEPC
                                   sudo cp -R /home/jenkins/${JOB_NAME}/* /opt/OpenEPC/
                                   sudo /opt/OpenEPC/install/install_prereqs.sh wharf db web_gui
                                   cd /opt/OpenEPC/wharf/
                                   sudo make -j4
                            '''
                        }
                    }
                }
                // stage ('PR-Build'){
                //     when {expression {return env.CHANGE_TARGET != null}}
                //     steps {
                //         script {           
                //             sh '''#!/bin/bash
                //             '''
                //         }
                //     }
                // }
                // stage('UnitTest-Coverage') {
                //     steps {
                //         sh """
                //         echo "Running Unit Tests"
                //         """
                //         junit 'test.xml'
                //         sh """
                //         echo "Running Cobertura Code Coverage"
                //         """
                //         cobertura autoUpdateHealth: false, autoUpdateStability: false, classCoverageTargets: '100, 0, 100', coberturaReportFile: 'coverage*.xml', conditionalCoverageTargets: '10, 0, 10', failUnhealthy: false, fileCoverageTargets: '100, 0, 100', lineCoverageTargets: '70, 0, 70', maxNumberOfBuilds: 0, methodCoverageTargets: '100, 0, 100', onlyStable: false, packageCoverageTargets: '100, 0, 100', sourceEncoding: 'ASCII', zoomCoverageChart: false
                //         sh """
                //         echo "Running Code Coverage"
                //         """
                //         publishCoverage adapters: [coberturaAdapter('coverage*.xml')], failUnstable: true, globalThresholds: [[thresholdTarget: 'Method', unstableThreshold: 100.0], [thresholdTarget: 'Package', unstableThreshold: 100.0], [thresholdTarget: 'Line', unstableThreshold: 70.0], [thresholdTarget: 'Conditional', unstableThreshold: 10.0], [thresholdTarget: 'Class', unstableThreshold: 100.0], [thresholdTarget: 'File', unstableThreshold: 100.0]], sourceFileResolver: sourceFiles('STORE_LAST_BUILD')
                //     }
                // }
                // stage('Static-Code') {
                //     steps {
                //         sh """
                //         echo "Running Code Analysis"
                //         """
                //         publishCppcheck failureThreshold: '0', newFailureThreshold: '0', pattern: 'cppcheck*.xml', severityInformation: false, severityNoCategory: false, severityPortability: false, severityStyle: false, unHealthy: '1'
                //     }
                // }
                // stage('Upload-Artifact') {
                //     //when {expression {return env.CHANGE_TARGET == null}}
                //     steps {
                //         script {
                //             sh """#!/bin/bash
                //                 rsync -avz --rsh="/usr/bin/sshpass -p "724365" ssh -o StrictHostKeyChecking=no -l root" where_is_debian_packages/ ubuntu@192.168.13.47:/debrepo/openepc
                //             """
                //         }
                //     }
                // }
            }
            post {
                always {
                    deleteDir()
                }
            }
        }
        stage('Merge and Tag') {
            agent {
                node {
                    label 'CINAR_BUILD_NODE_1'
                }
            }
            stages {
                stage('Merge-to-branch') {
                    when {
                        expression { return env.CHANGE_TARGET == null }
                        not { environment name: 'TARGET_MAIN_BRANCH', value: '' }
                    }
                    steps {
                        sshagent(['cinar-build-node-1']) {
                            sh """#!/bin/bash
                            ls -ltr
                            git config --global credential.helper store
                            git config --global user.name "jenkins.servis"
                            git push -f origin HEAD:${TARGET_MAIN_BRANCH}"""
                        }
                    }
                }
                stage('Tag-to-Commit') {

                    when {
                        expression { return env.CHANGE_TARGET == null }
                    }
                    environment {
                        VERSION=sh(returnStdout: true, script:"VERSION=${VERSION_ULAK}.${MINOR_VERSION_ULAK}.${PATCH_LEVEL_VERSION_ULAK} && echo \"\$VERSION\"").trim()
                    }
                    steps {
                        sshagent(['cinar-build-node-1']) {
                            sh """#!/bin/bash
                                ls -ltr
                                git config --global credential.helper store
                                git config --global user.name "jenkins.servis"
                                git tag -a "${env.VERSION}" -m "new version is ${env.VERSION}"
                                git push -f origin "${env.VERSION}"
                            """
                        }
                    }
                }
            }
            post {
                always {
                    deleteDir()
                }
            }
        }
        stage('Continous-Deployment') {
            agent {
                node {
                    label 'cinar_box_1.1_functional_test'
                }
            }
            when {
                expression {return env.CHANGE_TARGET == null}
                not { environment name: 'Setups', value: 'Not Installation' }
            }
             environment {
                VERSION=sh(returnStdout: true, script:"VERSION=${VERSION_ULAK}.${MINOR_VERSION_ULAK}.${PATCH_LEVEL_VERSION_ULAK} && echo \"\$VERSION\"").trim()
            }
            steps {
                dir('Devops') {
                    checkout([$class: 'GitSCM',
                    branches: [[name: '*/master']],
                    extensions: [[$class: 'CleanBeforeCheckout']],
                    userRemoteConfigs: [[
                    credentialsId: '7267ca7d-ae35-456c-9732-4c84b1d2c715',
                    url: 'https://bitbucket.ulakhaberlesme.com.tr:8443/scm/cin/devops.git']]]) 
                }
                echo "OpenEPC NF package name should be defined as NF_PACKAGE_NAME variable"
                echo "version ${env.VERSION}"
                sh """
                echo "OpenEPC package installation"
                cd ${WORKSPACE}/Devops/ansible
                echo "${env.NF_PACKAGE_NAME}=${env.VERSION}" > package-list-openepc
                ansible-playbook OpenEPC_package_install.yaml -i OpenEPC_hosts -e package_list_file=package-list-openepc
                """
            }
            post {
                always {
                   deleteDir()
                }
            }
        }
        stage('SendNotification') {
            agent {
                node {
                    label 'CINAR_BUILD_NODE_1'
                }
            }
            stages{
                stage('PR') {
                    when {expression {return env.CHANGE_TARGET != null}}
                        steps {
                            script {
                                emailext(
                                    body: """Jenkins Build ${currentBuild.currentResult}: Job ${env.JOB_NAME},
                                    At: ${env.BUILD_URL}""",
                                    recipientProviders: [requestor(), culprits()],
                                    subject: "Jenkins Build ${currentBuild.currentResult}: Job ${env.JOB_NAME}."
                                )
                            }
                        }
                }
                stage('Daily') {
                    environment {
                    RECIPIENT=[
                            "betul.aslan@ulakhaberlesme.com.tr",
                            "cem.topkaya@ulakhaberlesme.com.tr",
                            "ulak-manodev@ulakhaberlesme.com.tr",
                            "yasin.caner@ulakhaberlesme.com.tr"
                        ].join(",");
                    }
                    when {expression {return env.CHANGE_TARGET == null}}

                    steps {
                        sh """#!/bin/bash
                            git init
                            echo "<html>" >> commitmessage.html
                            echo "<header><title> This is the title</title></header>" >> commitmessage.html
                            echo "<body> Job ${env.JOB_NAME} build ${env.BUILD_NUMBER}\n More info at: ${env.BUILD_URL} </body>" >> commitmessage.html
                            echo "<body> Commit Autor and Commit Messages </body>" >> commitmessage.html
                            echo "<body> `git log --format=%B -n 1 \$(git log -1 --pretty=format:"%h") | cat -` </body>" >> commitmessage.html
                            echo "</html>" >> commitmessage.html
                            """
                        script {
                            def mailRecipients = "${env.RECIPIENT}"
                            def jobName = currentBuild.fullDisplayName
                            emailext body: '''${FILE, path="commitmessage.html"}''',
                                mimeType: 'text/html',
                                subject: "Jenkins Build ${currentBuild.currentResult}: Job ${env.JOB_NAME}",
                                to: "${mailRecipients}",
                                replyTo: "${mailRecipients}",
                                recipientProviders: [[$class: 'CulpritsRecipientProvider']]
                        }
                    }
                } 
            }
            post {
                always {
                  deleteDir()
                }
            }
        }
    }
}